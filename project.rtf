{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red183\green111\blue179;\red23\green23\blue23;\red202\green202\blue202;
\red89\green138\blue67;\red70\green137\blue204;\red212\green214\blue154;\red194\green126\blue101;\red167\green197\blue152;
\red140\green211\blue254;\red67\green192\blue160;}
{\*\expandedcolortbl;;\cssrgb\c77255\c52549\c75294;\cssrgb\c11765\c11765\c11765;\cssrgb\c83137\c83137\c83137;
\cssrgb\c41569\c60000\c33333;\cssrgb\c33725\c61176\c83922;\cssrgb\c86275\c86275\c66667;\cssrgb\c80784\c56863\c47059;\cssrgb\c70980\c80784\c65882;
\cssrgb\c61176\c86275\c99608;\cssrgb\c30588\c78824\c69020;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 import\cf4 \strokec4  cv2\cb1 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  matplotlib.pyplot \cf2 \strokec2 as\cf4 \strokec4  plt\cb1 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  numpy \cf2 \strokec2 as\cf4 \strokec4  np\cb1 \
\cf2 \cb3 \strokec2 from\cf4 \strokec4  tkinter.filedialog \cf2 \strokec2 import\cf4 \strokec4  *\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 photo = askopenfilename()\cb1 \
\cb3 originalmage = cv2.imread(photo)\cb1 \
\cb3 originalmage = cv2.cvtColor(originalmage, cv2.COLOR_BGR2RGB)\cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 # check if the image is chosen\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 if\cf4 \strokec4  originalmage \cf6 \strokec6 is\cf4 \strokec4  \cf6 \strokec6 None\cf4 \strokec4 :\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf7 \strokec7 print\cf4 \strokec4 (\cf8 \strokec8 "Can not find any image. Choose appropriate file"\cf4 \strokec4 )\cb1 \
\cb3     sys.exit()\cb1 \
\cb3 ReSized1 = cv2.resize(originalmage, (\cf9 \strokec9 960\cf4 \strokec4 , \cf9 \strokec9 540\cf4 \strokec4 ))\cb1 \
\cb3 grayScaleImage = cv2.cvtColor(originalmage, cv2.COLOR_BGR2GRAY)\cb1 \
\cb3 ReSized2 = cv2.resize(grayScaleImage, (\cf9 \strokec9 960\cf4 \strokec4 , \cf9 \strokec9 540\cf4 \strokec4 ))\cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 #applying median blur to smoothen an image\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 smoothGrayScale = cv2.medianBlur(grayScaleImage, \cf9 \strokec9 5\cf4 \strokec4 )\cb1 \
\cb3 ReSized3 = cv2.resize(smoothGrayScale, (\cf9 \strokec9 960\cf4 \strokec4 , \cf9 \strokec9 540\cf4 \strokec4 ))\cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 #retrieving the edges for cartoon effect\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 getEdge = cv2.adaptiveThreshold(smoothGrayScale, \cf9 \strokec9 255\cf4 \strokec4 , \cb1 \
\cb3   cv2.ADAPTIVE_THRESH_MEAN_C, \cb1 \
\cb3   cv2.THRESH_BINARY, \cf9 \strokec9 9\cf4 \strokec4 , \cf9 \strokec9 9\cf4 \strokec4 )\cb1 \
\cb3 ReSized4 = cv2.resize(getEdge, (\cf9 \strokec9 960\cf4 \strokec4 , \cf9 \strokec9 540\cf4 \strokec4 ))\cb1 \
\cb3  \cf5 \strokec5 #applying bilateral filter to remove noise \cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 #and keep edge sharp as required\cf4 \cb1 \strokec4 \
\cb3 colorImage = cv2.bilateralFilter(originalmage, \cf9 \strokec9 9\cf4 \strokec4 , \cf9 \strokec9 350\cf4 \strokec4 , \cf9 \strokec9 350\cf4 \strokec4 )\cb1 \
\cb3 ReSized5 = cv2.resize(colorImage, (\cf9 \strokec9 960\cf4 \strokec4 , \cf9 \strokec9 540\cf4 \strokec4 ))\cb1 \
\cb3     \cf5 \strokec5 #masking edged image with our "BEAUTIFY" image\cf4 \cb1 \strokec4 \
\cb3 cartoonImage = cv2.bitwise_and(colorImage, colorImage, \cf10 \strokec10 mask\cf4 \strokec4 =getEdge)\cb1 \
\cb3 ReSized6 = cv2.resize(cartoonImage, (\cf9 \strokec9 960\cf4 \strokec4 , \cf9 \strokec9 540\cf4 \strokec4 ))\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 #Plotting the whole transition\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 images=[ReSized1, ReSized2, ReSized3, ReSized4, ReSized5, ReSized6]\cb1 \
\cb3 fig, axes = plt.subplots(\cf9 \strokec9 3\cf4 \strokec4 ,\cf9 \strokec9 2\cf4 \strokec4 , \cf10 \strokec10 figsize\cf4 \strokec4 =(\cf9 \strokec9 8\cf4 \strokec4 ,\cf9 \strokec9 8\cf4 \strokec4 ), \cf10 \strokec10 subplot_kw\cf4 \strokec4 =\{\cf8 \strokec8 'xticks'\cf4 \strokec4 :[], \cf8 \strokec8 'yticks'\cf4 \strokec4 :[]\}, \cf10 \strokec10 gridspec_kw\cf4 \strokec4 =\cf11 \strokec11 dict\cf4 \strokec4 (\cf10 \strokec10 hspace\cf4 \strokec4 =\cf9 \strokec9 0.1\cf4 \strokec4 , \cf10 \strokec10 wspace\cf4 \strokec4 =\cf9 \strokec9 0.1\cf4 \strokec4 ))\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 for\cf4 \strokec4  i, ax \cf2 \strokec2 in\cf4 \strokec4  \cf7 \strokec7 enumerate\cf4 \strokec4 (axes.flat):\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     ax.imshow(images[i], \cf10 \strokec10 cmap\cf4 \strokec4 =\cf8 \strokec8 'gray'\cf4 \strokec4 )\cb1 \
\cb3 plt.show()\cb1 \
\
}